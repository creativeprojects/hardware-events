package lib

import (
	"bytes"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

var (
	diskstats1 = []string{`   8      48 sdd 1857 0 174264 71438 17093 67 3011648 109382 0 22180 44396 0 0 0 0
   8      49 sdd1 1147 0 161416 15468 17093 67 3011648 109382 0 65804 117980 0 0 0 0
   8      57 sdd9 94 0 8512 208 0 0 0 0 0 180 216 0 0 0 0
   8      80 sdf 1065234 175 72849398 1221064 14602497 43257 887243104 6834296 0 3563720 6539440 0 0 0 0
   8      81 sdf1 51 0 4704 18 0 0 0 0 0 16 20 0 0 0 0
   8      82 sdf2 68 0 6272 30 0 0 0 0 0 16 16 0 0 0 0
   8      84 sdf4 750147 175 72837646 337933 14602497 43257 887243104 6834296 0 3701612 6805756 0 0 0 0
   8      32 sdc 1908 0 186736 63413 16961 40 3038272 91819 0 19848 37120 0 0 0 0
   8      33 sdc1 1194 0 173888 9183 16961 40 3038272 91819 0 58384 96496 0 0 0 0
   8      41 sdc9 94 0 8512 221 0 0 0 0 0 196 228 0 0 0 0
   8      16 sdb 1917 0 184656 69674 17047 86 3011648 107182 0 20320 39872 0 0 0 0
   8      17 sdb1 1207 0 171808 16334 17047 86 3011648 107182 0 66892 118084 0 0 0 0
   8      25 sdb9 94 0 8512 164 0 0 0 0 0 136 152 0 0 0 0
   8      64 sde 1244214 385 72376990 2004494 16064021 18842 887243104 5822760 0 3086064 5561564 0 0 0 0
   8      65 sde1 56 0 7264 34 0 0 0 0 0 24 28 0 0 0 0
   8      66 sde2 72 0 8320 53 0 0 0 0 0 32 52 0 0 0 0
   8      68 sde4 929117 385 72360118 233008 16064021 18842 887243104 5822760 0 3122456 5635028 0 0 0 0
   8       0 sda 1905 0 199840 67992 16887 50 3038272 97345 0 20056 40188 0 0 0 0
   8       1 sda1 1191 0 186992 14834 16887 50 3038272 97345 0 66284 108876 0 0 0 0
   8       9 sda9 94 0 8512 205 0 0 0 0 0 184 224 0 0 0 0
 254       0 zram0 294 0 2352 0 1 0 8 0 0 0 0 0 0 0 0
 254       1 zram1 294 0 2352 0 1 0 8 0 0 0 0 0 0 0 0
 254       2 zram2 261 0 2088 0 1 0 8 0 0 0 0 0 0 0 0
 254       3 zram3 294 0 2352 0 1 0 8 0 0 0 0 0 0 0 0
`,
		`   8      48 sdd 1857 0 174264 71438 17093 67 3011648 109382 0 22180 44396 0 0 0 0
   8      49 sdd1 1147 0 161416 15468 17093 67 3011648 109382 0 65804 117980 0 0 0 0
   8      57 sdd9 94 0 8512 208 0 0 0 0 0 180 216 0 0 0 0
   8      80 sdf 1065452 175 72849398 1221619 14611766 43298 887842904 6837754 0 3565548 6542676 0 0 0 0
   8      81 sdf1 51 0 4704 18 0 0 0 0 0 16 20 0 0 0 0
   8      82 sdf2 68 0 6272 30 0 0 0 0 0 16 16 0 0 0 0
   8      84 sdf4 750147 175 72837646 337933 14611766 43298 887842904 6837754 0 3703440 6808992 0 0 0 0
   8      32 sdc 1908 0 186736 63413 16961 40 3038272 91819 0 19848 37120 0 0 0 0
   8      33 sdc1 1194 0 173888 9183 16961 40 3038272 91819 0 58384 96496 0 0 0 0
   8      41 sdc9 94 0 8512 221 0 0 0 0 0 196 228 0 0 0 0
   8      16 sdb 1917 0 184656 69674 17047 86 3011648 107182 0 20320 39872 0 0 0 0
   8      17 sdb1 1207 0 171808 16334 17047 86 3011648 107182 0 66892 118084 0 0 0 0
   8      25 sdb9 94 0 8512 164 0 0 0 0 0 136 152 0 0 0 0
   8      64 sde 1244432 385 72376990 2005689 16074185 18852 887842904 5825568 0 3087556 5564216 0 0 0 0
   8      65 sde1 56 0 7264 34 0 0 0 0 0 24 28 0 0 0 0
   8      66 sde2 72 0 8320 53 0 0 0 0 0 32 52 0 0 0 0
   8      68 sde4 929117 385 72360118 233008 16074185 18852 887842904 5825568 0 3123948 5637680 0 0 0 0
   8       0 sda 1905 0 199840 67992 16887 50 3038272 97345 0 20056 40188 0 0 0 0
   8       1 sda1 1191 0 186992 14834 16887 50 3038272 97345 0 66284 108876 0 0 0 0
   8       9 sda9 94 0 8512 205 0 0 0 0 0 184 224 0 0 0 0
 254       0 zram0 294 0 2352 0 1 0 8 0 0 0 0 0 0 0 0
 254       1 zram1 294 0 2352 0 1 0 8 0 0 0 0 0 0 0 0
 254       2 zram2 261 0 2088 0 1 0 8 0 0 0 0 0 0 0 0
 254       3 zram3 294 0 2352 0 1 0 8 0 0 0 0 0 0 0 0
`,
	}

	diskstats2 = []string{`   8      48 sdd 1471 0 32737 104113 1947 1 25240 352 0 92080 107933 0 0 0 0 44 3467
	8      49 sdd1 660 0 19576 16658 1947 1 25240 352 0 4496 17011 0 0 0 0 0 0
	8      57 sdd9 48 0 4416 493 0 0 0 0 0 520 493 0 0 0 0 0 0
	8      32 sdc 1357 1 30111 103389 1807 1 23320 3492 0 91180 110452 0 0 0 0 44 3571
	8      33 sdc1 537 1 16944 14823 1807 1 23320 3492 0 3584 18315 0 0 0 0 0 0
	8      41 sdc9 48 0 4416 483 0 0 0 0 0 404 483 0 0 0 0 0 0
	8      64 sde 18645 1 396024 6710 64181 5 1150056 6152 0 35232 16285 0 0 0 0 6000 3423
	8      65 sde1 54 0 6256 29 0 0 0 0 0 56 29 0 0 0 0 0 0
	8      66 sde2 72 0 8320 34 0 0 0 0 0 68 34 0 0 0 0 0 0
	8      68 sde4 11867 1 379838 2756 64181 5 1150056 6152 0 32532 8908 0 0 0 0 0 0
	8      80 sdf 17705 3 426048 6483 63349 1 1150056 5396 0 34060 15222 0 0 0 0 6000 3342
	8      81 sdf1 54 0 6256 28 0 0 0 0 0 60 28 0 0 0 0 0 0
	8      82 sdf2 72 0 8320 34 0 0 0 0 0 68 34 0 0 0 0 0 0
	8      84 sdf4 10927 3 409862 2597 63349 1 1150056 5396 0 31580 7994 0 0 0 0 0 0
	8      16 sdb 1461 0 30810 104684 1978 0 25976 2372 0 93308 110632 0 0 0 0 44 3575
	8      17 sdb1 637 0 17640 15555 1978 0 25976 2372 0 5276 17928 0 0 0 0 0 0
	8      25 sdb9 48 0 4416 319 0 0 0 0 0 348 319 0 0 0 0 0 0
	8       0 sda 1345 0 30002 103037 1879 2 24024 302 0 92528 106986 0 0 0 0 44 3646
	8       1 sda1 521 0 16832 13370 1879 2 24024 302 0 4440 13672 0 0 0 0 0 0
	8       9 sda9 48 0 4416 435 0 0 0 0 0 468 435 0 0 0 0 0 0
  230       0 zd0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  230       1 zd0p1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  230       2 zd0p2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  230      16 zd16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  230      17 zd16p1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  230      18 zd16p2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  230      32 zd32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  230      33 zd32p1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  230      34 zd32p2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  230      48 zd48 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  230      49 zd48p1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  230      50 zd48p2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
  254       0 zram0 294 0 2352 0 1 0 8 0 0 8 0 0 0 0 0 0 0`,
		`   8      48 sdd 1473 0 32737 104114 1947 1 25240 352 0 92088 107934 0 0 0 0 44 3467
8      49 sdd1 660 0 19576 16658 1947 1 25240 352 0 4496 17011 0 0 0 0 0 0
8      57 sdd9 48 0 4416 493 0 0 0 0 0 520 493 0 0 0 0 0 0
8      32 sdc 1359 1 30111 103389 1807 1 23320 3492 0 91188 110453 0 0 0 0 44 3571
8      33 sdc1 537 1 16944 14823 1807 1 23320 3492 0 3584 18315 0 0 0 0 0 0
8      41 sdc9 48 0 4416 483 0 0 0 0 0 404 483 0 0 0 0 0 0
8      64 sde 18674 1 396030 6727 64893 5 1159696 6199 0 35388 16362 0 0 0 0 6018 3435
8      65 sde1 54 0 6256 29 0 0 0 0 0 56 29 0 0 0 0 0 0
8      66 sde2 72 0 8320 34 0 0 0 0 0 68 34 0 0 0 0 0 0
8      68 sde4 11867 1 379838 2756 64893 5 1159696 6199 0 32656 8956 0 0 0 0 0 0
8      80 sdf 17734 3 426054 6500 64060 1 1159696 5444 0 34216 15298 0 0 0 0 6018 3353
8      81 sdf1 54 0 6256 28 0 0 0 0 0 60 28 0 0 0 0 0 0
8      82 sdf2 72 0 8320 34 0 0 0 0 0 68 34 0 0 0 0 0 0
8      84 sdf4 10927 3 409862 2597 64060 1 1159696 5444 0 31708 8042 0 0 0 0 0 0
8      16 sdb 1472 0 30816 106199 1978 0 25976 2372 0 94832 112147 0 0 0 0 44 3575
8      17 sdb1 637 0 17640 15555 1978 0 25976 2372 0 5276 17928 0 0 0 0 0 0
8      25 sdb9 48 0 4416 319 0 0 0 0 0 348 319 0 0 0 0 0 0
8       0 sda 1356 0 30008 104553 1879 2 24024 302 0 94056 108502 0 0 0 0 44 3646
8       1 sda1 521 0 16832 13370 1879 2 24024 302 0 4440 13672 0 0 0 0 0 0
8       9 sda9 48 0 4416 435 0 0 0 0 0 468 435 0 0 0 0 0 0
230       0 zd0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
230       1 zd0p1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
230       2 zd0p2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
230      16 zd16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
230      17 zd16p1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
230      18 zd16p2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
230      32 zd32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
230      33 zd32p1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
230      34 zd32p2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
230      48 zd48 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
230      49 zd48p1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
230      50 zd48p2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
254       0 zram0 294 0 2352 0 1 0 8 0 0 8 0 0 0 0 0 0 0`,
		`   8      48 sdd 1474 0 32737 104114 1947 1 25240 352 0 92092 107934 0 0 0 0 44 3467
8      49 sdd1 660 0 19576 16658 1947 1 25240 352 0 4496 17011 0 0 0 0 0 0
8      57 sdd9 48 0 4416 493 0 0 0 0 0 520 493 0 0 0 0 0 0
8      32 sdc 1360 1 30111 103389 1807 1 23320 3492 0 91192 110453 0 0 0 0 44 3571
8      33 sdc1 537 1 16944 14823 1807 1 23320 3492 0 3584 18315 0 0 0 0 0 0
8      41 sdc9 48 0 4416 483 0 0 0 0 0 404 483 0 0 0 0 0 0
8      64 sde 18682 1 396033 6741 64966 5 1160560 6203 0 35428 16381 0 0 0 0 6020 3436
8      65 sde1 54 0 6256 29 0 0 0 0 0 56 29 0 0 0 0 0 0
8      66 sde2 72 0 8320 34 0 0 0 0 0 68 34 0 0 0 0 0 0
8      68 sde4 11867 1 379838 2756 64966 5 1160560 6203 0 32668 8960 0 0 0 0 0 0
8      80 sdf 17742 3 426057 6504 64134 1 1160560 5449 0 34240 15308 0 0 0 0 6020 3354
8      81 sdf1 54 0 6256 28 0 0 0 0 0 60 28 0 0 0 0 0 0
8      82 sdf2 72 0 8320 34 0 0 0 0 0 68 34 0 0 0 0 0 0
8      84 sdf4 10927 3 409862 2597 64134 1 1160560 5449 0 31720 8046 0 0 0 0 0 0
8      16 sdb 1478 0 30819 107056 1978 0 25976 2372 0 95700 113004 0 0 0 0 44 3575
8      17 sdb1 637 0 17640 15555 1978 0 25976 2372 0 5276 17928 0 0 0 0 0 0
8      25 sdb9 48 0 4416 319 0 0 0 0 0 348 319 0 0 0 0 0 0
8       0 sda 1362 0 30011 105419 1879 2 24024 302 0 94932 109368 0 0 0 0 44 3646
8       1 sda1 521 0 16832 13370 1879 2 24024 302 0 4440 13672 0 0 0 0 0 0
8       9 sda9 48 0 4416 435 0 0 0 0 0 468 435 0 0 0 0 0 0
230       0 zd0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
230       1 zd0p1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
230       2 zd0p2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
230      16 zd16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
230      17 zd16p1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
230      18 zd16p2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
230      32 zd32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
230      33 zd32p1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
230      34 zd32p2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
230      48 zd48 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
230      49 zd48p1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
230      50 zd48p2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
254       0 zram0 294 0 2352 0 1 0 8 0 0 8 0 0 0 0 0 0 0`,
	}
)

func TestDiskstatsReader(t *testing.T) {
	for _, input := range diskstats1 {
		t.Run("", func(t *testing.T) {
			buffer := bytes.NewBufferString(input)
			diskstats, err := NewDiskstats(buffer)
			require.NoError(t, err)
			assert.Equal(t, 24, len(diskstats.data))
			assert.Equal(t, 18, len(diskstats.data["sda"]))
		})
	}
}

func TestIOInProgress(t *testing.T) {
	for _, input := range diskstats1 {
		t.Run("", func(t *testing.T) {
			buffer := bytes.NewBufferString(input)
			diskstats, err := NewDiskstats(buffer)
			require.NoError(t, err)
			for _, diskname := range []string{"sda", "sdb", "sdc", "sdd", "sde", "sdf"} {
				assert.Equal(t, 0, diskstats.IOInProgress(diskname))
			}
		})
	}
}

func TestReadWriteInProgress(t *testing.T) {
	stats1, err := NewDiskstats(bytes.NewBufferString(diskstats1[0]))
	require.NoError(t, err)
	stats2, err := NewDiskstats(bytes.NewBufferString(diskstats1[1]))
	require.NoError(t, err)

	testData := []struct {
		diskname  string
		read      int64
		write     int64
		partRead  int64
		partWrite int64
	}{
		{"sda", 0, 0, 0, 0},
		{"sdb", 0, 0, 0, 0},
		{"sdc", 0, 0, 0, 0},
		{"sdd", 0, 0, 0, 0},
		{"sde", 0, 599800, 0, 599800},
		{"sdf", 0, 599800, 0, 599800},
	}

	for _, testItem := range testData {
		t.Run(testItem.diskname, func(t *testing.T) {
			read, write := stats2.IOActivityFrom(stats1, testItem.diskname)
			assert.Equal(t, testItem.read, read, "Incorrect number of read")
			assert.Equal(t, testItem.write, write, "Incorrect number of write")
			read, write = stats2.PartitionsIOActivityFrom(stats1, testItem.diskname)
			assert.Equal(t, testItem.partRead, read, "Incorrect number of read")
			assert.Equal(t, testItem.partWrite, write, "Incorrect number of write")
		})
	}
}

func TestReadWriteInProgress_(t *testing.T) {
	stats1, err := NewDiskstats(bytes.NewBufferString(diskstats2[0]))
	require.NoError(t, err)
	stats2, err := NewDiskstats(bytes.NewBufferString(diskstats2[1]))
	require.NoError(t, err)

	testData := []struct {
		diskname  string
		read      int64
		write     int64
		partRead  int64
		partWrite int64
	}{
		{"sda", 6, 0, 0, 0},
		{"sdb", 6, 0, 0, 0},
		{"sdc", 0, 0, 0, 0},
		{"sdd", 0, 0, 0, 0},
	}

	for _, testItem := range testData {
		t.Run(testItem.diskname, func(t *testing.T) {
			read, write := stats2.IOActivityFrom(stats1, testItem.diskname)
			assert.Equal(t, testItem.read, read, "Incorrect number of read")
			assert.Equal(t, testItem.write, write, "Incorrect number of write")
			read, write = stats2.PartitionsIOActivityFrom(stats1, testItem.diskname)
			assert.Equal(t, testItem.partRead, read, "Incorrect number of read")
			assert.Equal(t, testItem.partWrite, write, "Incorrect number of write")
		})
	}
}

func TestPartitions(t *testing.T) {
	fixtures := []struct {
		diskname   string
		partitions []string
	}{
		{"sda", []string{"sda1", "sda9"}},
		{"sdb", []string{"sdb1", "sdb9"}},
		{"sdc", []string{"sdc1", "sdc9"}},
		{"sdd", []string{"sdd1", "sdd9"}},
		{"sde", []string{"sde1", "sde2", "sde4"}},
		{"sdf", []string{"sdf1", "sdf2", "sdf4"}},
	}

	stats, err := NewDiskstats(bytes.NewBufferString(diskstats2[0]))
	require.NoError(t, err)

	for _, fixture := range fixtures {
		t.Run(fixture.diskname, func(t *testing.T) {
			partitions := stats.findPartitions(fixture.diskname)
			assert.ElementsMatch(t, fixture.partitions, partitions)
		})
	}
}
